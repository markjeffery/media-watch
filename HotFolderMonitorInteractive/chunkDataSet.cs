//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.1.4322.573
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

namespace HotFolderMonitorInteractive {
    using System;
    using System.Data;
    using System.Xml;
    using System.Runtime.Serialization;
    
    
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.ToolboxItem(true)]
    public class chunkDataSet : DataSet {
        
        private chunkDataTable tablechunk;
        
        private SelectChunkDataTable tableSelectChunk;
        
        public chunkDataSet() {
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        protected chunkDataSet(SerializationInfo info, StreamingContext context) {
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((strSchema != null)) {
                DataSet ds = new DataSet();
                ds.ReadXmlSchema(new XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["chunk"] != null)) {
                    this.Tables.Add(new chunkDataTable(ds.Tables["chunk"]));
                }
                if ((ds.Tables["SelectChunk"] != null)) {
                    this.Tables.Add(new SelectChunkDataTable(ds.Tables["SelectChunk"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.InitClass();
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public chunkDataTable chunk {
            get {
                return this.tablechunk;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public SelectChunkDataTable SelectChunk {
            get {
                return this.tableSelectChunk;
            }
        }
        
        public override DataSet Clone() {
            chunkDataSet cln = ((chunkDataSet)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        protected override void ReadXmlSerializable(XmlReader reader) {
            this.Reset();
            DataSet ds = new DataSet();
            ds.ReadXml(reader);
            if ((ds.Tables["chunk"] != null)) {
                this.Tables.Add(new chunkDataTable(ds.Tables["chunk"]));
            }
            if ((ds.Tables["SelectChunk"] != null)) {
                this.Tables.Add(new SelectChunkDataTable(ds.Tables["SelectChunk"]));
            }
            this.DataSetName = ds.DataSetName;
            this.Prefix = ds.Prefix;
            this.Namespace = ds.Namespace;
            this.Locale = ds.Locale;
            this.CaseSensitive = ds.CaseSensitive;
            this.EnforceConstraints = ds.EnforceConstraints;
            this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
            this.InitVars();
        }
        
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new XmlTextReader(stream), null);
        }
        
        internal void InitVars() {
            this.tablechunk = ((chunkDataTable)(this.Tables["chunk"]));
            if ((this.tablechunk != null)) {
                this.tablechunk.InitVars();
            }
            this.tableSelectChunk = ((SelectChunkDataTable)(this.Tables["SelectChunk"]));
            if ((this.tableSelectChunk != null)) {
                this.tableSelectChunk.InitVars();
            }
        }
        
        private void InitClass() {
            this.DataSetName = "chunkDataSet";
            this.Prefix = "";
            this.Namespace = "http://www.tempuri.org/chunkDataSet.xsd";
            this.Locale = new System.Globalization.CultureInfo("en-GB");
            this.CaseSensitive = false;
            this.EnforceConstraints = true;
            this.tablechunk = new chunkDataTable();
            this.Tables.Add(this.tablechunk);
            this.tableSelectChunk = new SelectChunkDataTable();
            this.Tables.Add(this.tableSelectChunk);
        }
        
        private bool ShouldSerializechunk() {
            return false;
        }
        
        private bool ShouldSerializeSelectChunk() {
            return false;
        }
        
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        public delegate void chunkRowChangeEventHandler(object sender, chunkRowChangeEvent e);
        
        public delegate void SelectChunkRowChangeEventHandler(object sender, SelectChunkRowChangeEvent e);
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class chunkDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnstart_tc;
            
            private DataColumn columnchannel;
            
            private DataColumn columnend_tc;
            
            private DataColumn columnduration;
            
            private DataColumn columnoffset;
            
            private DataColumn columnisblank;
            
            private DataColumn columnurl;
            
            internal chunkDataTable() : 
                    base("chunk") {
                this.InitClass();
            }
            
            internal chunkDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn start_tcColumn {
                get {
                    return this.columnstart_tc;
                }
            }
            
            internal DataColumn channelColumn {
                get {
                    return this.columnchannel;
                }
            }
            
            internal DataColumn end_tcColumn {
                get {
                    return this.columnend_tc;
                }
            }
            
            internal DataColumn durationColumn {
                get {
                    return this.columnduration;
                }
            }
            
            internal DataColumn offsetColumn {
                get {
                    return this.columnoffset;
                }
            }
            
            internal DataColumn isblankColumn {
                get {
                    return this.columnisblank;
                }
            }
            
            internal DataColumn urlColumn {
                get {
                    return this.columnurl;
                }
            }
            
            public chunkRow this[int index] {
                get {
                    return ((chunkRow)(this.Rows[index]));
                }
            }
            
            public event chunkRowChangeEventHandler chunkRowChanged;
            
            public event chunkRowChangeEventHandler chunkRowChanging;
            
            public event chunkRowChangeEventHandler chunkRowDeleted;
            
            public event chunkRowChangeEventHandler chunkRowDeleting;
            
            public void AddchunkRow(chunkRow row) {
                this.Rows.Add(row);
            }
            
            public chunkRow AddchunkRow(System.DateTime start_tc, int channel, System.DateTime end_tc, long duration, int offset, bool isblank, string url) {
                chunkRow rowchunkRow = ((chunkRow)(this.NewRow()));
                rowchunkRow.ItemArray = new object[] {
                        start_tc,
                        channel,
                        end_tc,
                        duration,
                        offset,
                        isblank,
                        url};
                this.Rows.Add(rowchunkRow);
                return rowchunkRow;
            }
            
            public chunkRow FindBystart_tcchannel(System.DateTime start_tc, int channel) {
                return ((chunkRow)(this.Rows.Find(new object[] {
                            start_tc,
                            channel})));
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                chunkDataTable cln = ((chunkDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new chunkDataTable();
            }
            
            internal void InitVars() {
                this.columnstart_tc = this.Columns["start_tc"];
                this.columnchannel = this.Columns["channel"];
                this.columnend_tc = this.Columns["end_tc"];
                this.columnduration = this.Columns["duration"];
                this.columnoffset = this.Columns["offset"];
                this.columnisblank = this.Columns["isblank"];
                this.columnurl = this.Columns["url"];
            }
            
            private void InitClass() {
                this.columnstart_tc = new DataColumn("start_tc", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnstart_tc);
                this.columnchannel = new DataColumn("channel", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnchannel);
                this.columnend_tc = new DataColumn("end_tc", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnend_tc);
                this.columnduration = new DataColumn("duration", typeof(long), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnduration);
                this.columnoffset = new DataColumn("offset", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnoffset);
                this.columnisblank = new DataColumn("isblank", typeof(bool), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnisblank);
                this.columnurl = new DataColumn("url", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnurl);
                this.Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] {
                                this.columnstart_tc,
                                this.columnchannel}, true));
                this.columnstart_tc.AllowDBNull = false;
                this.columnchannel.AllowDBNull = false;
                this.columnend_tc.AllowDBNull = false;
                this.columnduration.AllowDBNull = false;
                this.columnoffset.AllowDBNull = false;
                this.columnisblank.AllowDBNull = false;
                this.columnurl.AllowDBNull = false;
            }
            
            public chunkRow NewchunkRow() {
                return ((chunkRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new chunkRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(chunkRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.chunkRowChanged != null)) {
                    this.chunkRowChanged(this, new chunkRowChangeEvent(((chunkRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.chunkRowChanging != null)) {
                    this.chunkRowChanging(this, new chunkRowChangeEvent(((chunkRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.chunkRowDeleted != null)) {
                    this.chunkRowDeleted(this, new chunkRowChangeEvent(((chunkRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.chunkRowDeleting != null)) {
                    this.chunkRowDeleting(this, new chunkRowChangeEvent(((chunkRow)(e.Row)), e.Action));
                }
            }
            
            public void RemovechunkRow(chunkRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class chunkRow : DataRow {
            
            private chunkDataTable tablechunk;
            
            internal chunkRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tablechunk = ((chunkDataTable)(this.Table));
            }
            
            public System.DateTime start_tc {
                get {
                    return ((System.DateTime)(this[this.tablechunk.start_tcColumn]));
                }
                set {
                    this[this.tablechunk.start_tcColumn] = value;
                }
            }
            
            public int channel {
                get {
                    return ((int)(this[this.tablechunk.channelColumn]));
                }
                set {
                    this[this.tablechunk.channelColumn] = value;
                }
            }
            
            public System.DateTime end_tc {
                get {
                    return ((System.DateTime)(this[this.tablechunk.end_tcColumn]));
                }
                set {
                    this[this.tablechunk.end_tcColumn] = value;
                }
            }
            
            public long duration {
                get {
                    return ((long)(this[this.tablechunk.durationColumn]));
                }
                set {
                    this[this.tablechunk.durationColumn] = value;
                }
            }
            
            public int offset {
                get {
                    return ((int)(this[this.tablechunk.offsetColumn]));
                }
                set {
                    this[this.tablechunk.offsetColumn] = value;
                }
            }
            
            public bool isblank {
                get {
                    return ((bool)(this[this.tablechunk.isblankColumn]));
                }
                set {
                    this[this.tablechunk.isblankColumn] = value;
                }
            }
            
            public string url {
                get {
                    return ((string)(this[this.tablechunk.urlColumn]));
                }
                set {
                    this[this.tablechunk.urlColumn] = value;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class chunkRowChangeEvent : EventArgs {
            
            private chunkRow eventRow;
            
            private DataRowAction eventAction;
            
            public chunkRowChangeEvent(chunkRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public chunkRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class SelectChunkDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnstart_tc;
            
            private DataColumn columnchannel_id;
            
            private DataColumn columnend_tc;
            
            private DataColumn columnduration;
            
            private DataColumn columnoffset;
            
            private DataColumn columnisblank;
            
            private DataColumn columnurl;
            
            internal SelectChunkDataTable() : 
                    base("SelectChunk") {
                this.InitClass();
            }
            
            internal SelectChunkDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn start_tcColumn {
                get {
                    return this.columnstart_tc;
                }
            }
            
            internal DataColumn channel_idColumn {
                get {
                    return this.columnchannel_id;
                }
            }
            
            internal DataColumn end_tcColumn {
                get {
                    return this.columnend_tc;
                }
            }
            
            internal DataColumn durationColumn {
                get {
                    return this.columnduration;
                }
            }
            
            internal DataColumn offsetColumn {
                get {
                    return this.columnoffset;
                }
            }
            
            internal DataColumn isblankColumn {
                get {
                    return this.columnisblank;
                }
            }
            
            internal DataColumn urlColumn {
                get {
                    return this.columnurl;
                }
            }
            
            public SelectChunkRow this[int index] {
                get {
                    return ((SelectChunkRow)(this.Rows[index]));
                }
            }
            
            public event SelectChunkRowChangeEventHandler SelectChunkRowChanged;
            
            public event SelectChunkRowChangeEventHandler SelectChunkRowChanging;
            
            public event SelectChunkRowChangeEventHandler SelectChunkRowDeleted;
            
            public event SelectChunkRowChangeEventHandler SelectChunkRowDeleting;
            
            public void AddSelectChunkRow(SelectChunkRow row) {
                this.Rows.Add(row);
            }
            
            public SelectChunkRow AddSelectChunkRow(System.DateTime start_tc, int channel_id, System.DateTime end_tc, long duration, int offset, bool isblank, string url) {
                SelectChunkRow rowSelectChunkRow = ((SelectChunkRow)(this.NewRow()));
                rowSelectChunkRow.ItemArray = new object[] {
                        start_tc,
                        channel_id,
                        end_tc,
                        duration,
                        offset,
                        isblank,
                        url};
                this.Rows.Add(rowSelectChunkRow);
                return rowSelectChunkRow;
            }
            
            public SelectChunkRow FindBystart_tcchannel_id(System.DateTime start_tc, int channel_id) {
                return ((SelectChunkRow)(this.Rows.Find(new object[] {
                            start_tc,
                            channel_id})));
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                SelectChunkDataTable cln = ((SelectChunkDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new SelectChunkDataTable();
            }
            
            internal void InitVars() {
                this.columnstart_tc = this.Columns["start_tc"];
                this.columnchannel_id = this.Columns["channel_id"];
                this.columnend_tc = this.Columns["end_tc"];
                this.columnduration = this.Columns["duration"];
                this.columnoffset = this.Columns["offset"];
                this.columnisblank = this.Columns["isblank"];
                this.columnurl = this.Columns["url"];
            }
            
            private void InitClass() {
                this.columnstart_tc = new DataColumn("start_tc", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnstart_tc);
                this.columnchannel_id = new DataColumn("channel_id", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnchannel_id);
                this.columnend_tc = new DataColumn("end_tc", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnend_tc);
                this.columnduration = new DataColumn("duration", typeof(long), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnduration);
                this.columnoffset = new DataColumn("offset", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnoffset);
                this.columnisblank = new DataColumn("isblank", typeof(bool), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnisblank);
                this.columnurl = new DataColumn("url", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnurl);
                this.Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] {
                                this.columnstart_tc,
                                this.columnchannel_id}, true));
                this.columnstart_tc.AllowDBNull = false;
                this.columnchannel_id.AllowDBNull = false;
                this.columnend_tc.AllowDBNull = false;
                this.columnduration.AllowDBNull = false;
                this.columnoffset.AllowDBNull = false;
                this.columnisblank.AllowDBNull = false;
                this.columnurl.AllowDBNull = false;
            }
            
            public SelectChunkRow NewSelectChunkRow() {
                return ((SelectChunkRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new SelectChunkRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(SelectChunkRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.SelectChunkRowChanged != null)) {
                    this.SelectChunkRowChanged(this, new SelectChunkRowChangeEvent(((SelectChunkRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.SelectChunkRowChanging != null)) {
                    this.SelectChunkRowChanging(this, new SelectChunkRowChangeEvent(((SelectChunkRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.SelectChunkRowDeleted != null)) {
                    this.SelectChunkRowDeleted(this, new SelectChunkRowChangeEvent(((SelectChunkRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.SelectChunkRowDeleting != null)) {
                    this.SelectChunkRowDeleting(this, new SelectChunkRowChangeEvent(((SelectChunkRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveSelectChunkRow(SelectChunkRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class SelectChunkRow : DataRow {
            
            private SelectChunkDataTable tableSelectChunk;
            
            internal SelectChunkRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableSelectChunk = ((SelectChunkDataTable)(this.Table));
            }
            
            public System.DateTime start_tc {
                get {
                    return ((System.DateTime)(this[this.tableSelectChunk.start_tcColumn]));
                }
                set {
                    this[this.tableSelectChunk.start_tcColumn] = value;
                }
            }
            
            public int channel_id {
                get {
                    return ((int)(this[this.tableSelectChunk.channel_idColumn]));
                }
                set {
                    this[this.tableSelectChunk.channel_idColumn] = value;
                }
            }
            
            public System.DateTime end_tc {
                get {
                    return ((System.DateTime)(this[this.tableSelectChunk.end_tcColumn]));
                }
                set {
                    this[this.tableSelectChunk.end_tcColumn] = value;
                }
            }
            
            public long duration {
                get {
                    return ((long)(this[this.tableSelectChunk.durationColumn]));
                }
                set {
                    this[this.tableSelectChunk.durationColumn] = value;
                }
            }
            
            public int offset {
                get {
                    return ((int)(this[this.tableSelectChunk.offsetColumn]));
                }
                set {
                    this[this.tableSelectChunk.offsetColumn] = value;
                }
            }
            
            public bool isblank {
                get {
                    return ((bool)(this[this.tableSelectChunk.isblankColumn]));
                }
                set {
                    this[this.tableSelectChunk.isblankColumn] = value;
                }
            }
            
            public string url {
                get {
                    return ((string)(this[this.tableSelectChunk.urlColumn]));
                }
                set {
                    this[this.tableSelectChunk.urlColumn] = value;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class SelectChunkRowChangeEvent : EventArgs {
            
            private SelectChunkRow eventRow;
            
            private DataRowAction eventAction;
            
            public SelectChunkRowChangeEvent(SelectChunkRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public SelectChunkRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
